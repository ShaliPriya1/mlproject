import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.pipeline import Pipeline
# Sample data (make sure to load your actual dataset)
df = pd.DataFrame({
    'incident_description': [
        'System crash during login process',
        'Performance issues on user dashboard',
        'Error while processing payment',
        'Network timeout while accessing server'
    ],
    'component_team': ['Infrastructure', 'Frontend', 'Backend', 'Network'],
    'status': ['open', 'open', 'closed', 'open'],
    'resolution_steps': ['Check server logs', 'Optimize frontend', 'Fix payment gateway', 'Check network connectivity']
})

# Preprocess: Clean and prepare the data for NLP
df['incident_description'] = df['incident_description'].str.lower().str.replace('[^a-z\s]', '')  # lowercase and remove non-alphanumeric characters
# Split data into training and testing sets for component team categorization
X = df['incident_description']  # Features (incident descriptions)
y = df['component_team']  # Labels (team responsible)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the machine learning pipeline
pipeline_rf = Pipeline([
    ('vectorizer', TfidfVectorizer(max_features=5000)),  # Convert text to numeric vectors
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))  # Use Random Forest classifier
])

# Train the model
pipeline_rf.fit(X_train, y_train)

# Evaluate the model
y_pred = pipeline_rf.predict(X_test)
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
print(f'Classification Report: \n{classification_report(y_test, y_pred)}')

# Split data into training and testing sets for next-step prediction
X_resolutions = df['incident_description']  # Features (incident descriptions)
y_resolutions = df['resolution_steps']  # Labels (resolution steps)

# Split data into train and test sets
X_train_res, X_test_res, y_train_res, y_test_res = train_test_split(X_resolutions, y_resolutions, test_size=0.2, random_state=42)

# Define the machine learning pipeline for next steps prediction
pipeline_resolution = Pipeline([
    ('vectorizer', TfidfVectorizer(max_features=5000)),  # Convert text to numeric vectors
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))  # Use Random Forest classifier
])

# Train the model
pipeline_resolution.fit(X_train_res, y_train_res)

# Evaluate the model
y_pred_res = pipeline_resolution.predict(X_test_res)
print(f'Next Steps Prediction Accuracy: {accuracy_score(y_test_res, y_pred_res)}')
print(f'Next Steps Classification Report: \n{classification_report(y_test_res, y_pred_res)}')

# Predict the team for a new incident description
new_incident = "Payment system outage due to database connection issue"
predicted_team = pipeline_rf.predict([new_incident])[0]
print(f"The incident should be assigned to the {predicted_team} team.")


# Predict the next steps for a new incident description
next_steps = pipeline_resolution.predict([new_incident])[0]
print(f"Suggested next steps: {next_steps}")
